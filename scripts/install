#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

install_type=$YNH_APP_ARG_INSTALL_TYPE
encrypt=$YNH_APP_ARG_ENCRYPT
ynh_print_OFF; encryption_pwd=$YNH_APP_ARG_ENCRYPTION_PWD; ynh_print_ON
ssh_host=$YNH_APP_ARG_SSH_HOST
ssh_port=$YNH_APP_ARG_SSH_PORT

pub_key=$YNH_APP_ARG_PUB_KEY
auto_detect_failure=$YNH_APP_ARG_AUTO_DETECT_FAILURE
delay_before_incident=$YNH_APP_ARG_DELAY_BEFORE_INCIDENT
contact_mail=$YNH_APP_ARG_CONTACT_MAIL
auto_deploy=$YNH_APP_ARG_AUTO_DEPLOY

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

if [ "$install_type" == "main server" ]; then
	install_type=main
elif  [ "$install_type" == "fallback server" ]; then
	install_type=fallback
else
	ynh_die "Install type not recognized"
fi

if [ "$install_type" == "main" ]
then
	ynh_print_OFF
	if [ $encrypt -eq 1 ]; then
		test -n "$encryption_pwd" || ynh_die "encryption_pwd can't be empty if you choose a 'main server' installation with encryption."
	fi
	ynh_print_ON
	test -n "$ssh_host" || ynh_die "ssh_host can't be empty if you choose a 'main server' installation."
	test -n "$ssh_port" ||  ynh_die "ssh_port can't be empty if you choose a 'main server' installation."
else
	test -n "$pub_key" ||  ynh_die "pub_key can't be empty if you choose a 'fallback server' installation"
fi

final_path=/opt/yunohost/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app install_type $install_type
ynh_app_setting_set $app encrypt $encrypt
if [ "$install_type" == "main" ]
then
	ynh_app_setting_set $app ssh_host $ssh_host
	ynh_app_setting_set $app ssh_port $ssh_port
else
	ynh_app_setting_set $app pub_key "$pub_key"
	ynh_app_setting_set $app auto_detect_failure "$auto_detect_failure"
fi

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies ccrypt rsync mlocate

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE THE DATA DIRECTORY
#=================================================

mkdir -p "/home/yunohost.app/$app"

if [ "$install_type" == "main" ]
then
	#=================================================
	# CONFIG FOR THE MAIN SERVER
	#=================================================
	# MODIFY THE CONFIG
	#=================================================

	configfile="$final_path/send_process/config.conf"
	ynh_replace_string "ssh_user=.*" "ssh_user=$app" "$configfile"
	ynh_replace_string "ssh_host=.*" "ssh_host=$ssh_host" "$configfile"
	ynh_replace_string "ssh_port=.*" "ssh_port=$ssh_port" "$configfile"

	data_dir="/home/yunohost.app/$app/fallback_backup"
	ynh_replace_string "main_storage_dir=.*" "main_storage_dir=$data_dir" "$configfile"
	ynh_replace_string "encrypt=.*" "encrypt=$encrypt" "$configfile"

	#=================================================
	# CREATE A SSH KEY
	#=================================================

	ssh_key="$final_path/send_process/ssh_key"
	ssh-keygen -t rsa -b 4096 -N "" -f "$ssh_key" > /dev/null
	chown root: "$ssh_key"
	chmod 400 "$ssh_key"
	pub_key="${ssh_key}.pub"
	ynh_replace_string "ssh_key=.*" "ssh_key=$ssh_key" "$configfile"

	mkdir -p /root/.ssh
	ssh-keyscan -t rsa $ssh_host >> /root/.ssh/known_hosts

	#=================================================
	# FILL THE APPS LIST
	#=================================================

	echo "#000# For each app you want to backup, precede by [.]" > "$final_path/send_process/app_list"
	yunohost app list -i | grep id: | sed 's/.*id:/[]:/' >> "$final_path/send_process/app_list"
	ynh_replace_string ".*: fallback" "[-]: fallback" "$final_path/send_process/app_list"

	#=================================================
	# SET THE CRON
	#=================================================

	echo "0 1 * * * root \"$final_path/send_process/send_backup.sh\" > /dev/null" > /etc/cron.d/$app

	#=================================================
	# CREATE DIRECTORIES
	#=================================================

	mkdir -p "$final_path/send_process/checksum"
	mkdir -p "$data_dir/backup"

	#=================================================
	# STORE THE PASSWORD FOR ENCRYPTION
	#=================================================

	passkey="$final_path/send_process/passkey"
	ynh_replace_string "pass_file=.*" "pass_file=$passkey" "$configfile"
	ynh_print_OFF; echo "$encryption_pwd" > "$passkey"; ynh_print_ON
	chmod 400 "$passkey"

else
	#=================================================
	# CONFIG FOR THE FALLBACK SERVER
	#=================================================
	# CREATE DEDICATED USER
	#=================================================

	if ! ynh_system_user_exists "$app"
	then
		useradd -d "/home/$app" --system --user-group $app --shell /bin/bash
	fi

	#=================================================
	# ADD THE SSH PUBLIC KEY
	#=================================================

	mkdir -p "/home/$app/.ssh"
	# Secure the ssh key
	echo -n "no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty " >> "/home/$app/.ssh/authorized_keys"
	# Then add the key
	echo "$pub_key" >> "/home/$app/.ssh/authorized_keys"

	#=================================================
	# SET THE USER IN DEPLOY_FALLBACK SCRIPTS
	#=================================================

	ynh_replace_string "\(local_archive_dir=\"/home/\)fallback" "\1$app" "$final_path/deploy_process/deploy_fallback.sh"
	ynh_replace_string "\(local_archive_dir=\"/home/\)fallback" "\1$app" "$final_path/deploy_process/close_fallback.sh"
	ynh_replace_string "\(local_archive_dir=\"/home/\)fallback" "\1$app" "$final_path/deploy_process/auto_deploy_fallback.sh"

	#=================================================
	# SET A CHROOT FOR THE SSH USER
	#=================================================

	chroot_dir="/home/$app"

	# Create directories for the binaries
	mkdir -p $chroot_dir/{bin,lib,lib64}

	# Copy the ld-linux file, according to the architecture
	copy_ld-linux () {
		! test -e "$1" || sudo cp "$1" "$chroot_dir/$2/"
	}
	copy_ld-linux /lib/ld-linux.so.2 lib
	copy_ld-linux /lib64/ld-linux-x86-64.so.2 lib64
	copy_ld-linux /lib/ld-linux-armhf.so.3 lib

	# Copy binary and its libraries into the chroot.
	ssh_chroot_copy_binary () {
		# Find and copy the binary file
		sudo cp `which $1` "$chroot_dir/bin/$(basename $1)"
		# Then search for its libraries
		while read lib_file
		do
			# Filter lib without path
			if echo "$lib_file" | grep --quiet "=> /"
			then
				# Keep only the path of this lib
				local lib_path=$(echo "$lib_file" | awk '{print $3}')
				sudo cp $lib_path "$chroot_dir/lib/"
			fi
		done <<< "$(ldd `which $1`)"
	}

	# Copy bash in the chroot
	ssh_chroot_copy_binary bash
	# Then rsync
	ssh_chroot_copy_binary rsync

	# Create the directory for rsync
	mkdir -p $chroot_dir/backup

	# The parent directory shall belong to root
	chown $app: -R "$chroot_dir"
	chown root: "$chroot_dir"

	# Set the chroot in the ssh config
	echo "
	Match User $app # Automatically added by $app
	ChrootDirectory /home/%u # Automatically added by $app
	AllowTcpForwarding no # Automatically added by $app
	X11Forwarding no # Automatically added by $app" >> /etc/ssh/sshd_config

	# Reload ssh service
	ynh_system_reload ssh

	#=================================================
	# CONFIGURE AUTO DEPLOYMENT
	#=================================================

	# If failure auto detection is activated
	if [ $auto_detect_failure -eq 1 ]
	then
		auto_check_config_file="$final_path/deploy_process/auto_check.conf"

		# Convert delay_before_incident in minutes
		case $delay_before_incident in
			5min ) delay_before_incident=5; cron_delay="*/1 *" ;;
			1h ) delay_before_incident=60; cron_delay="*/10 *" ;;
			4h ) delay_before_incident=240; cron_delay="*/30 *" ;;
			8h ) delay_before_incident=480; cron_delay="0 */1" ;;
			12h ) delay_before_incident=720; cron_delay="0 */1" ;;
			24h ) delay_before_incident=1440; cron_delay="0 */1" ;;
		esac

		# Fill the config file
		ynh_replace_string "delay_before_incident=.*" "delay_before_incident=$delay_before_incident" "$auto_check_config_file"
		# Send an email at root if there no email
		if [ -z "$contact_mail" ]
		then
			ynh_print_info "Seems that you forgot to fill in a contact email address. root is going to be used instead."
			contact_mail=root
		fi
		ynh_replace_string "contact_mail=.*" "contact_mail=$contact_mail" "$auto_check_config_file"
		ynh_replace_string "auto_deploy=.*" "auto_deploy=$auto_deploy" "$auto_check_config_file"
		ynh_replace_string "__FINAL_PATH__" "$final_path" "$auto_check_config_file"

		# Put in place the cron file
		ynh_replace_string "__FINAL_PATH__" "$final_path" "$final_path/deploy_process/auto_deploy_fallback.cron"
		sudo cp $final_path/deploy_process/auto_deploy_fallback.cron /etc/cron.d/auto_deploy_fallback
		# And configure it
		ynh_replace_string "? ?" "$cron_delay" "/etc/cron.d/auto_deploy_fallback"
	fi
fi

#=================================================
# SET LINKS FOR THE ADMIN USER
#=================================================

if [ "$install_type" == "main" ]; then
	ln -s "$final_path/send_process/app_list" "/home/yunohost.app/$app/app_list"
	ln -s "$final_path/send_process/config.conf" "/home/yunohost.app/$app/config.conf"
	ln -s "$final_path/update_from_fallback_process/update_from_fallback.sh" "/home/yunohost.app/$app/update_from_fallback"
else
	ln -s "$final_path/deploy_process/deploy_fallback.sh" "/home/yunohost.app/$app/deploy_fallback"
	ln -s "$final_path/deploy_process/close_fallback.sh" "/home/yunohost.app/$app/close_fallback"
fi

#=================================================
# CONFIGURE HOOKS
#=================================================

ynh_replace_string "__FINALPATH__" "$final_path" "../hooks/post_app_install"
ynh_replace_string "__FINALPATH__" "$final_path" "../hooks/post_app_remove"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R root: $final_path

if [ "$install_type" == "main" ]
then
	#=================================================
	# SETUP LOGROTATE
	#=================================================

	mkdir -p /var/log/$app
	ln -s /var/log/$app/$app.log "$final_path/send_process/send_backup.log"
	# Use logrotate to manage application logfile(s)
	ynh_use_logrotate

	#=================================================
	# DISCLAIMER
	#=================================================

	ynh_print_info "
By default, no apps will be backuped for your fallback server. To select which apps you want to backup, please have a look at the app_list file in /home/yunohost.app/$app/app_list.
Please take note of your public ssh key. This will be usefull during the installation on your fallback server." >&2
	ynh_print_info "$(cat "$pub_key")" >&2
fi

#=================================================
# SEND A README FOR THE ADMIN
#=================================================

ynh_print_OFF
if [ $encrypt -eq 1 ]
then
	encrypt_infos="Your password for encryption is '$encryption_pwd'

"
else
	encrypt_infos=""
fi

if [ "$install_type" == "main" ]
then
	Informations="${encrypt_infos}By default, no apps will be backuped for your fallback server. To select which apps you want to backup, please have a look at the app_list file in /home/yunohost.app/$app/app_list.

Please take note of your public ssh key. This will be usefull during the installation on your fallback server :
$(cat "$pub_key")

Fallback is going to backup and send its backup every night.
If you want to change the frequency, have a look to the file /etc/cron.d/$app.

You can also find a config file at /home/yunohost.app/fallback/config.conf"
else
	domain=$(yunohost domain list | grep -m1 "-" | awk '{print $2}')
	if [ -n "$domain" ]
	then
		domain="$domain or "
	else
		domain=""
	fi
	Informations="This server is now your fallback, you should keep this server only for this purpose.

Credentials for the ssh connexion from the other part of this app:
- ssh_host: $domain$(hostname)
- ssh_user: $app
- ssh_port: $(grep "^Port " /etc/ssh/sshd_config | awk '{print $2}')"

	if [ $auto_detect_failure -eq 1 ]
	then
		Informations="$Informations

Failure auto detection is activated on this fallback. In case of failure of your main server, you should receive an email on $contact_mail to inform you.
To modify the configuration related to this option, please have a look at $auto_check_config_file"
	fi
fi

message="$Informations

For more informations about how to use this app, please read the readme https://github.com/YunoHost-Apps/fallback_ynh/blob/master/README.md#how-it-works.

If you facing an issue or want to improve this app, please open a new issue in this project: https://github.com/YunoHost-Apps/fallback_ynh"

ynh_send_readme_to_admin "$message" "root"
ynh_print_ON
