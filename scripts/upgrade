#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

install_type=$(ynh_app_setting_get $app install_type)
encrypt=$(ynh_app_setting_get $app encrypt)
final_path=$(ynh_app_setting_get $app final_path)
ssh_host=$(ynh_app_setting_get $app ssh_host)
ssh_port=$(ynh_app_setting_get $app ssh_port)
auto_detect_failure=$(ynh_app_setting_get $app auto_detect_failure)

# Optional parameters from config-panel feature
contact_mail=$(ynh_app_setting_get $app contact_mail)
auto_deploy=$(ynh_app_setting_get $app auto_deploy)
delay_before_incident=$(ynh_app_setting_get $app delay_before_incident)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

if [ "$install_type" == "fallback" ]
then
	# If auto_detect_failure setting doesn't exist
	if [ -z "$auto_detect_failure" ]; then
		auto_detect_failure=0
		ynh_app_setting_set $app auto_detect_failure $auto_detect_failure
	fi
	# If delay_before_incident setting doesn't exist
	if [ -z "$delay_before_incident" ]; then
		delay_before_incident=$(grep "^delay_before_incident=" "$final_path/deploy_process/auto_check.conf" | cut -d= -f2)
		ynh_app_setting_set $app delay_before_incident $delay_before_incident
	fi
	# If contact_mail setting doesn't exist
	if [ -z "$contact_mail" ]; then
		contact_mail=$(grep "^contact_mail=" "$final_path/deploy_process/auto_check.conf" | cut -d= -f2)
		ynh_app_setting_set $app contact_mail $contact_mail
	fi
	# If auto_deploy setting doesn't exist
	if [ -z "$auto_deploy" ]; then
		auto_deploy=$(grep "^auto_deploy=" "$final_path/deploy_process/auto_check.conf" | cut -d= -f2)
		ynh_app_setting_set $app auto_deploy $auto_deploy
	fi
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source "$final_path"
fi

#=================================================
# SPECIFIC UPGRADE
#=================================================

if [ "$install_type" == "main" ]
then
	#=================================================
	# CONFIG FOR THE MAIN SERVER
	#=================================================
	# MODIFY THE CONFIG
	#=================================================

	if [ "$upgrade_type" == "UPGRADE_APP" ]
	then
		configfile="$final_path/send_process/config.conf"
		ynh_replace_string "ssh_user=.*" "ssh_user=$app" "$configfile"
		ynh_replace_string "ssh_host=.*" "ssh_host=$ssh_host" "$configfile"
		ynh_replace_string "ssh_port=.*" "ssh_port=$ssh_port" "$configfile"
		ynh_replace_string "ssh_key=.*" "ssh_key=$final_path/send_process/ssh_key" "$configfile"

		data_dir="/home/yunohost.app/$app/fallback_backup"
		ynh_replace_string "main_storage_dir=.*" "main_storage_dir=$data_dir" "$configfile"
		ynh_replace_string "encrypt=.*" "encrypt=$encrypt" "$configfile"
	fi

	#=================================================
	# UPDATE THE CRON
	#=================================================

	echo "0 1 * * * root \"$final_path/send_process/send_backup.sh\" > /dev/null" > /etc/cron.d/$app

else
	#=================================================
	# CONFIG FOR THE FALLBACK SERVER
	#=================================================
	# CREATE DEDICATED USER
	#=================================================

	if ! ynh_system_user_exists "$app"
	then
		useradd -d "/home/$app" --system --user-group $app --shell /bin/bash
	fi

	#=================================================
	# SET THE USER IN DEPLOY_FALLBACK SCRIPTS
	#=================================================

	if [ "$upgrade_type" == "UPGRADE_APP" ]
	then
		ynh_replace_string "\(local_archive_dir=\"/home/\)USER" "\1$app" "$final_path/deploy_process/deploy_fallback.sh"
		ynh_replace_string "\(local_archive_dir=\"/home/\)USER" "\1$app" "$final_path/deploy_process/close_fallback.sh"
	fi

	#=================================================
	# UPDATE THE CHROOT FOR THE SSH USER
	#=================================================

	chroot_dir="/home/$app"

	# Create directories for the binaries
	mkdir -p $chroot_dir/{bin,lib,lib64}

	# Copy the ld-linux file, according to the architecture
	copy_ld-linux () {
		! test -e "$1" || sudo cp "$1" "$chroot_dir/$2/"
	}
	copy_ld-linux /lib/ld-linux.so.2 lib
	copy_ld-linux /lib64/ld-linux-x86-64.so.2 lib64
	copy_ld-linux /lib/ld-linux-armhf.so.3 lib

	# Copy binary and its libraries into the chroot.
	ssh_chroot_copy_binary () {
		# Find and copy the binary file
		sudo cp `which $1` "$chroot_dir/bin/$(basename $1)"
		# Then search for its libraries
		while read lib_file
		do
			# Filter lib without path
			if echo "$lib_file" | grep --quiet "=> /"
			then
				# Keep only the path of this lib
				local lib_path=$(echo "$lib_file" | awk '{print $3}')
				sudo cp $lib_path "$chroot_dir/lib/"
			fi
		done <<< "$(ldd `which $1`)"
	}

	# Copy bash in the chroot
	ssh_chroot_copy_binary bash
	# Then rsync
	ssh_chroot_copy_binary rsync

	# Create the directory for rsync
	mkdir -p $chroot_dir/backup

	# The parent directory shall belong to root
	chown $app: -R "$chroot_dir"
	chown root: "$chroot_dir"

	# Update the ssh config
	if ! grep "# Automatically added by $app" /etc/ssh/sshd_config
	then
		echo "
		Match User $app # Automatically added by $app
		ChrootDirectory /home/%u # Automatically added by $app
		AllowTcpForwarding no # Automatically added by $app
		X11Forwarding no # Automatically added by $app" >> /etc/ssh/sshd_config

		# Reload ssh service
		ynh_system_reload --service_name=ssh
	fi

	#=================================================
	# CONFIGURE AUTO DEPLOYMENT
	#=================================================

	if [ "$upgrade_type" == "UPGRADE_APP" ]
	then
		auto_check_config_file="$final_path/deploy_process/auto_check.conf"
		ynh_replace_string "__FINAL_PATH__" "$final_path" "$auto_check_config_file"

		# Optional parameters from config-panel feature
		if [ -n "$contact_mail" ]; then
			ynh_replace_string "^contact_mail=.*" "contact_mail=$contact_mail" "$auto_check_config_file"
		fi
		if [ -n "$auto_deploy" ]; then
			ynh_replace_string "^auto_deploy=.*" "auto_deploy=$auto_deploy" "$auto_check_config_file"
		fi
		if [ -n "$delay_before_incident" ]; then
			ynh_replace_string "^delay_before_incident=.*" "delay_before_incident=$delay_before_incident" "$auto_check_config_file"
		fi

		# Configure the cron file
		ynh_replace_string "__FINAL_PATH__" "$final_path" "$final_path/deploy_process/auto_deploy_fallback.cron"
	fi
fi

#=================================================
# UPDATE LINKS FOR THE ADMIN USER
#=================================================

if [ "$install_type" == "main" ]; then
	ln -sf "$final_path/send_process/app_list" "/home/yunohost.app/$app/app_list"
	ln -sf "$final_path/send_process/config.conf" "/home/yunohost.app/$app/config.conf"
	ln -sf "$final_path/update_from_fallback_process/update_from_fallback.sh" "/home/yunohost.app/$app/update_from_fallback"
else
	ln -sf "$final_path/deploy_process/deploy_fallback.sh" "/home/yunohost.app/$app/deploy_fallback"
	ln -sf "$final_path/deploy_process/close_fallback.sh" "/home/yunohost.app/$app/close_fallback"
fi

#=================================================
# CONFIGURE HOOKS
#=================================================

ynh_replace_string "__FINALPATH__" "$final_path" "../hooks/post_app_install"
ynh_replace_string "__FINALPATH__" "$final_path" "../hooks/post_app_remove"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R root: $final_path

if [ "$install_type" == "main" ]
then
	#=================================================
	# SETUP LOGROTATE
	#=================================================

	# Use logrotate to manage application logfile(s)
	ynh_use_logrotate --non-append
fi
