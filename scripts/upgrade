#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=4

app=$YNH_APP_INSTANCE_NAME

install_type=$(ynh_app_setting_get --app=$app --key=install_type)
encrypt=$(ynh_app_setting_get --app=$app --key=encrypt)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
ssh_host=$(ynh_app_setting_get --app=$app --key=ssh_host)
ssh_port=$(ynh_app_setting_get --app=$app --key=ssh_port)
pub_key="$(ynh_app_setting_get --app=$app --key=pub_key)"
auto_detect_failure=$(ynh_app_setting_get --app=$app --key=auto_detect_failure)
datadir=$(ynh_app_setting_get --app=$app --key=datadir)

# Optional parameters from config-panel feature
contact_mail=$(ynh_app_setting_get --app=$app --key=contact_mail)
auto_deploy=$(ynh_app_setting_get --app=$app --key=auto_deploy)
delay_before_incident=$(ynh_app_setting_get --app=$app --key=delay_before_incident)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=5

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

if [ "$install_type" == "fallback" ]
then
	# If auto_detect_failure setting doesn't exist
	if [ -z "$auto_detect_failure" ]; then
		auto_detect_failure=0
		ynh_app_setting_set --app=$app --key=auto_detect_failure --value=$auto_detect_failure
	fi
	# If delay_before_incident setting doesn't exist
	if [ -z "$delay_before_incident" ]; then
		delay_before_incident=$(grep "^delay_before_incident=" "$final_path/deploy_process/auto_check.conf" | cut -d= -f2)
		ynh_app_setting_set --app=$app --key=delay_before_incident --value=$delay_before_incident
	fi
	# If contact_mail setting doesn't exist
	if [ -z "$contact_mail" ]; then
		contact_mail=$(grep "^contact_mail=" "$final_path/deploy_process/auto_check.conf" | cut -d= -f2)
		ynh_app_setting_set --app=$app --key=contact_mail --value=$contact_mail
	fi
	# If auto_deploy setting doesn't exist
	if [ -z "$auto_deploy" ]; then
		auto_deploy=$(grep "^auto_deploy=" "$final_path/deploy_process/auto_check.conf" | cut -d= -f2)
		ynh_app_setting_set --app=$app --key=auto_deploy --value=$auto_deploy
	fi
fi

# If datadir doesn't exist, create it
if [ -z "$datadir" ]; then
	datadir=/home/yunohost.app/$app
	ynh_app_setting_set --app=$app --key=datadir --value=$datadir
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
    ynh_script_progression --message="Upgrading source files..." --weight=2
	# Do not replace credentials
	mv "$final_path/DynHost/cred" "$final_path/DynHost/cred_backup"
	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
	mv "$final_path/DynHost/cred_backup" "$final_path/DynHost/cred"
fi

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=9

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# SPECIFIC UPGRADE
#=================================================

if [ "$install_type" == "main" ]
then
	#=================================================
	# CONFIG FOR THE MAIN SERVER
	#=================================================
	# MODIFY THE CONFIG
	#=================================================

	if [ "$upgrade_type" == "UPGRADE_APP" ]
	then
		ynh_script_progression --message="Reconfiguring Fallback..."
		configfile="$final_path/send_process/config.conf"
		ynh_replace_string --match_string="ssh_user=.*" --replace_string="ssh_user=$app" --target_file="$configfile"
		ynh_replace_string --match_string="ssh_host=.*" --replace_string="ssh_host=$ssh_host" --target_file="$configfile"
		ynh_replace_string --match_string="ssh_port=.*" --replace_string="ssh_port=$ssh_port" --target_file="$configfile"
		ynh_replace_string --match_string="ssh_key=.*" --replace_string="ssh_key=$final_path/send_process/ssh_key" --target_file="$configfile"

		ynh_replace_string --match_string="main_storage_dir=.*" --replace_string="main_storage_dir=$datadir/fallback_backup" --target_file="$configfile"
		ynh_replace_string --match_string="encrypt=.*" --replace_string="encrypt=$encrypt" --target_file="$configfile"
	fi

	#=================================================
	# UPDATE THE CRON
	#=================================================
	ynh_script_progression --message="Updating the cron..."

	echo "0 1 * * * root \"$final_path/send_process/send_backup.sh\" > /dev/null" > /etc/cron.d/$app

else
	#=================================================
	# CONFIG FOR THE FALLBACK SERVER
	#=================================================
	# CREATE DEDICATED USER
	#=================================================

	if ! ynh_system_user_exists --username=$app
	then
		ynh_script_progression --message="Making sure dedicated system user exists..."
		useradd -d "/home/$app" --system --user-group $app --shell /bin/bash
	fi

	# Allow the user to use ssh
	adduser $app ssh.app

	#=================================================
	# SET THE USER IN DEPLOY_FALLBACK SCRIPTS
	#=================================================

	if [ "$upgrade_type" == "UPGRADE_APP" ]
	then
		ynh_replace_string --match_string="\(local_archive_dir=\"/home/\)USER" --replace_string="\1$app" --target_file="$final_path/deploy_process/deploy_fallback.sh"
		ynh_replace_string --match_string="\(local_archive_dir=\"/home/\)USER" --replace_string="\1$app" --target_file="$final_path/deploy_process/close_fallback.sh"
	fi

	#=================================================
	# UPDATE THE CHROOT FOR THE SSH USER
	#=================================================
	ynh_script_progression --message="Updating the chroot for the ssh user..."

	chroot_dir="/home/$app"

	# Create directories for the binaries
	mkdir -p $chroot_dir/{bin,lib,lib64}

	# Copy the ld-linux file, according to the architecture
	copy_ld-linux () {
		! test -e "$1" || cp "$1" "$chroot_dir/$2/"
	}
	copy_ld-linux /lib/ld-linux.so.2 lib
	copy_ld-linux /lib64/ld-linux-x86-64.so.2 lib64
	copy_ld-linux /lib/ld-linux-armhf.so.3 lib

	# Copy binary and its libraries into the chroot.
	ssh_chroot_copy_binary () {
		# Find and copy the binary file
		cp `which $1` "$chroot_dir/bin/$(basename $1)"
		# Then search for its libraries
		while read lib_file
		do
			# Filter lib without path
			if echo "$lib_file" | grep --quiet "=> /"
			then
				# Keep only the path of this lib
				local lib_path=$(echo "$lib_file" | awk '{print $3}')
				cp $lib_path "$chroot_dir/lib/"
			fi
		done <<< "$(ldd `which $1`)"
	}

	# Copy bash in the chroot
	ssh_chroot_copy_binary bash
	# Then rsync
	ssh_chroot_copy_binary rsync

	# Create the directory for rsync
	mkdir -p $chroot_dir/backup

	# The parent directory shall belong to root
	chown $app: -R "$chroot_dir"
	chown root: "$chroot_dir"
	chmod 755 -R "$chroot_dir"
	# Set the permissions for the ssh key
	chmod 644 "$chroot_dir/.ssh/authorized_keys"

	# Update the ssh config
	if ! grep "# Automatically added by $app" /etc/ssh/sshd_config
	then
		echo "
		Match User $app # Automatically added by $app
		ChrootDirectory /home/%u # Automatically added by $app
		AllowTcpForwarding no # Automatically added by $app
		X11Forwarding no # Automatically added by $app" >> /etc/ssh/sshd_config

		# Reload ssh service
		ynh_system_reload --action=reload --service_name=ssh
	fi

	#=================================================
	# CONFIGURE AUTO DEPLOYMENT
	#=================================================

	if [ "$upgrade_type" == "UPGRADE_APP" ]
	then
		ynh_script_progression --message="Configuring auto deployment..."
		auto_check_config_file="$final_path/deploy_process/auto_check.conf"
		ynh_replace_string --match_string="__FINAL_PATH__" --replace_string="$final_path" --target_file="$auto_check_config_file"

		# Optional parameters from config-panel feature
		if [ -n "$contact_mail" ]; then
			ynh_replace_string --match_string="^contact_mail=.*" --replace_string="contact_mail=$contact_mail" --target_file="$auto_check_config_file"
		fi
		if [ -n "$auto_deploy" ]; then
			ynh_replace_string --match_string="^auto_deploy=.*" --replace_string="auto_deploy=$auto_deploy" --target_file="$auto_check_config_file"
		fi
		if [ -n "$delay_before_incident" ]; then
			ynh_replace_string --match_string="^delay_before_incident=.*" --replace_string="delay_before_incident=$delay_before_incident" --target_file="$auto_check_config_file"
		fi

		# Configure the cron file
		ynh_replace_string --match_string="__FINAL_PATH__" --replace_string="$final_path" --target_file="$final_path/deploy_process/auto_deploy_fallback.cron"
	fi
fi

#=================================================
# UPDATE LINKS FOR THE ADMIN USER
#=================================================

if [ "$install_type" == "main" ]; then
	ln -sf "$final_path/send_process/app_list" "$datadir/app_list"
	ln -sf "$final_path/send_process/config.conf" "$datadir/config.conf"
	ln -sf "$final_path/update_from_fallback_process/update_from_fallback.sh" "$datadir/update_from_fallback"
else
	ln -sf "$final_path/deploy_process/deploy_fallback.sh" "$datadir/deploy_fallback"
	ln -sf "$final_path/deploy_process/close_fallback.sh" "$datadir/close_fallback"
fi

#=================================================
# CONFIGURE HOOKS
#=================================================

ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="../hooks/post_app_install"
ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="../hooks/post_app_remove"

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R root: $final_path

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================

if [ "$install_type" == "main" ]
then
	ynh_script_progression --message="Upgrading logrotate configuration..." --weight=2

	# Use logrotate to manage application logfile(s)
	ynh_use_logrotate --non-append
fi

#=================================================
# SEND A README FOR THE ADMIN
#=================================================

# Get main domain and buid the url of the admin panel of the app.
admin_panel="https://$(grep portal_domain /etc/ssowat/conf.json | cut -d'"' -f4)/yunohost/admin/#/apps/$app"

# Build the changelog
ynh_app_changelog || true

if [ "$install_type" == "main" ]
then
	Informations="By default, no apps will be backuped for your fallback server. To select which apps you want to backup, please have a look at the app_list file in $datadir/app_list.

Please take note of your public ssh key. This will be usefull during the installation on your fallback server :
$pub_key

Fallback is going to backup and send its backup every night.
If you want to change the frequency, have a look to the file /etc/cron.d/$app.

You can also find a config file at /home/yunohost.app/fallback/config.conf"
else
	domain=$(yunohost domain list | grep -m1 "-" | awk '{print $2}')
	if [ -n "$domain" ]
	then
		domain="$domain or "
	else
		domain=""
	fi
	Informations="This server is now your fallback, you should keep this server only for this purpose.

Credentials for the ssh connexion from the other part of this app:
- ssh_host: $domain$(hostname)
- ssh_user: $app
- ssh_port: $(grep "^Port " /etc/ssh/sshd_config | awk '{print $2}')"

	if [ $auto_detect_failure -eq 1 ]
	then
		Informations="$Informations

Failure auto detection is activated on this fallback. In case of failure of your main server.
To modify the configuration related to this option, please have a look at $final_path/deploy_process/auto_check.conf"
	fi
fi

echo "$Informations

For more information about how to use this app, please read the __URL_TAG1__readme__URL_TAG2__https://github.com/YunoHost-Apps/fallback_ynh/blob/master/README.md#how-it-works__URL_TAG3__.

You can configure this app easily by using the experimental __URL_TAG1__config-panel feature__URL_TAG2__$admin_panel/config-panel__URL_TAG3__.
You can also find some specific actions for this app by using the experimental __URL_TAG1__action feature__URL_TAG2__$admin_panel/actions__URL_TAG3__.

If you're facing an issue or want to improve this app, please open a new issue in this __URL_TAG1__project__URL_TAG2__https://github.com/YunoHost-Apps/fallback_ynh__URL_TAG3__.

---

Changelog since your last upgrade:
$(cat changelog)" > mail_to_send

ynh_send_readme_to_admin --app_message="mail_to_send" --recipients="root" --type=upgrade

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
